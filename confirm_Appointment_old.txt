import React, { Component } from 'react';
import { Container, Header, Title, Content, Footer, FooterTab, Button, Left, Right, Body, Thumbnail, Icon } from 'native-base';
import { StyleSheet, View, Text, SafeAreaView, Image, TextInput, TouchableOpacity, Alert, Modal, ActivityIndicator } from 'react-native';
import { widthPercentageToDP as wp, heightPercentageToDP as hp, listenOrientationChange as lor, removeOrientationListener as rol, } from 'react-native-responsive-screen';
import firestore from '@react-native-firebase/firestore';
import AsyncStorage from '@react-native-community/async-storage';
import functions from '@react-native-firebase/functions';
import moment from "moment";
import RN_Icon from 'react-native-vector-icons/AntDesign';

const styles = StyleSheet.create({
  header_bg: {
    backgroundColor: "#FFFFFF",
    elevation: 0,
    borderBottomWidth: 1,
    borderBottomColor: '#D4D4D4',
    marginLeft: 10,
    marginRight: 10
  },
  Header_Body: {
    flex: 4,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#FFFFFF',
  },
  Header_Name: {
    fontFamily: 'NotoSans-Regular',
    color: '#2570EC',
    fontSize: 20,
    fontStyle: 'normal',
    fontWeight: '700'
  },
  content: {
    padding: 20
  },
})

class confirm_Appointment extends React.Component {

  state = {
    loader: false,
    ShopImage_url: '',
    shop_name: '',
    availability: '',
    appointment: '',
    userId: '',
    owner_number: '',
    user_name: '',
    user_number: '',
    owner_token: '',
    user_token: '',
    B_startTime: '',
    B_endTime: '',
    A_startTime: '',
    A_endTime: '',
    message: null,
    name: '',
  }
  async componentDidMount() {
    this.setState({loader: true})
    console.log("prop owner Id", this.props.route.params.ownerId)
    const owner = firestore().collection('owner').doc(this.props.route.params.ownerId).get().then(owner => {
      if (!owner.exists) {
        Alert.alert(
          'Warning',
          `Youe Entered Wrong Owner Number`,
          [
            {
              text: 'OK',
              onPress: () => {
                this.props.navigation.navigate('qrcode_scanner');
              },
            },
          ],
          { cancelable: false },
        );
      }

      const checkAvailability = functions().httpsCallable('check');
      checkAvailability({
        ownerId: this.props.route.params.ownerId.replace(/"/g, "") //owner number was coming with double quotes so i just remove them by replace function
      })
        .then(snapshot => {
          console.log('Available');
          console.log("check function snapshot", snapshot)
          console.log("check function snapshot 2", snapshot.data.msg)

          if (snapshot.data.msg) {
            this.setState({
              message: snapshot.data.msg,
              appointment: snapshot.data.appointment
            }, () => {
              console.log("message in checking functi0on", this.state.message)
              console.log("is it tru? ", this.state.appointment)
              this.checkOwner_availability()
            })
          } else {
            this.setState({
              message: '',
              appointment: false
            }, () => {
              this.checkOwner_availability()
            })
          }
        })
        .catch(err => {
          Alert.alert('You Entered a wrong number');
          console.log('Not Available', err);
        })
    })
  }
  async checkOwner_availability() {
    console.log('here is me')
    firestore()
      .collection('owner')
      .doc(this.props.route.params.ownerId.replace(/"/g, ""))
      .get()
      .then(snapshot => {
        console.log(this.props.route.params.ownerId)
        console.log(snapshot)
        console.log("user id : ", snapshot.data().user_Id)
        this.setState({
          owner_number: snapshot.id,
          ShopImage_url: snapshot.data().image_url,
          shop_name: snapshot.data().Buisness_name,
          availability: snapshot.data().Availablity,
          userId: snapshot.data().user_Id,
          owner_token: snapshot.data().owner_token,
          B_startTime: snapshot.data().buisness_start_time,
          B_endTime: snapshot.data().buisness_end_time,
          A_startTime: snapshot.data().appointment_start_time,
          A_endTime: snapshot.data().appointment_end_time,
        })
        const d = snapshot.data().user_Id;
        console.log(d)

        firestore()
          .doc(`user/${d}`)
          .get()
          .then(snap => {
            console.log("my isd llllllllll", snap.data())
            this.setState({
              user_number: snap.data().mobile_no,
              user_name: snap.data().name,
              profileImage_url: snap.data().imageurl,
              user_token: snap.data().user_token
            })
          }).catch(err => {
            console.log(err)
          })
      })
      .catch(err => {
        console.log(err)
      })
    this.setState({
      loader: false
    })
  }
  async confirm_Appointment() {

    if (await AsyncStorage.getItem('@owner_number') == 'true') { // checking whether user already set an appointment or not
      Alert.alert('You have already set an appointment')
    } else {

      this.setState({ loader: true })
      const value = await AsyncStorage.getItem('@owner_number');
      let userId
      let uName
      let utoken

      let sap = await firestore().collection('user').where('mobile_no', '==', value).get()
      sap.forEach(element => {
        console.log(element.data())
        userId = element.id
        if (this.state.name) {
          uName = this.state.name
        } else {
          uName = element.data().name
        }
        utoken = element.data().user_token
      });
      console.log(' confirm appointment ', userId + uName + utoken)
      const appoinment_number = await firestore()
        .collection('appointment-count')
        .doc(this.state.owner_number)
        .get()
        .then(async (response) => {
          console.log('appointment number for making an appointment from appoiintment count collection', response.data().Appointment_numbers)
          await firestore()
            .collection('appointment')
            .add({
              ownerId: this.state.owner_number,
              timestamp: new Date(),
              userId: userId,
              user_mobileNo: value,
              user_name: uName,
              Appointment_No: response.data().Appointment_numbers,
              owner_token: this.state.owner_token,
              user_token: utoken
            })
            .then(async (res) => {
              console.log(res)

              // SetAppointment flag set to true since user had made an appointment
              await AsyncStorage.setItem('@SetAppointment', 'true');
              await AsyncStorage.setItem('@Book_ownerId', this.props.route.params.ownerId);

              this.setState({ loader: false })
              this.props.navigation.navigate('Appointment_Details', { ownerId: this.props.route.params.ownerId.replace(/"/g, "") })
            })
        })
      // const addAppointment = functions().httpsCallable('online_appointment');
      // addAppointment({
      //   ownerId: this.state.owner_number,
      //   userId: userId,
      //   user_number: value,
      //   userName: uName,
      //   user_token: utoken,
      //   owner_token: this.state.owner_token
      // })
      //   .then(async (snap) => {
      //     console.log("appointment set for user :", snap)

      //     // SetAppointment flag set to true since user had made an appointment
      //     await AsyncStorage.setItem('@SetAppointment', 'true');
      //     await AsyncStorage.setItem('@Book_ownerId', this.props.route.params.ownerId);

      //     this.setState({ loader: false })
      //     this.props.navigation.navigate('Appointment_Details', { ownerId: this.props.route.params.ownerId.replace(/"/g, "") })
      //   })
      //   .catch(error => {
      //     this.setState({ loader: false })
      //     Alert.alert('Problem occured while an Appointment :' + error)
      //   })
    }
  }

  render() {
    return (
      <Container>
        <Modal transparent={true} visible={this.state.loader} >
          <View style={{ backgroundColor: 'rgba(0, 0, 0, 0.8)', alignItems: 'center', justifyContent: 'center', width: '100%', height: '100%' }}>
            <ActivityIndicator color='#2570EC' size='large' style={{ alignSelf: 'center' }} />
          </View>
        </Modal>
        {/* ------------------------- Header Bar ----------------------------------- */}
        <Header style={styles.header_bg} androidStatusBarColor="grey">
          <Left style={{ flex: 1 }}>
            <TouchableOpacity onPress={() => { this.props.navigation.navigate('qrcode_scanner') }}>
              <RN_Icon name='arrowleft' size={30} color="#000" />
            </TouchableOpacity>
          </Left>
          <Body style={styles.Header_Body}>
            <Title style={styles.Header_Name}>Book appointment</Title>
          </Body>
          <Right style={{ flex: 1 }} />
        </Header>
        <Container>
          <Text numberOfLines={1} style={{ position: 'absolute', zIndex: 1, color: '#FFFFFF', fontSize: 30, left: 170, top: 155, fontWeight: '700' }}>{this.state.shop_name}</Text>
          <Text numberOfLines={1} style={{ position: 'absolute', zIndex: 1, color: '#2570EC', fontSize: 20, left: 170, top: 200, fontWeight: '700' }}>{this.state.user_name}</Text>
          <Text numberOfLines={1} style={{ position: 'absolute', zIndex: 2, color: '#4F4F4F', fontSize: 14, left: 170, top: 230, fontWeight: '700' }}>{this.state.owner_number}</Text>
          <View style={{ backgroundColor: 'rgba(0,0,0,0.8)'}}>
            <Image style={{ width: '100%', height: 200, zIndex: 10 }} source={this.state.ShopImage_url ? { uri: this.state.ShopImage_url } : require('../img/b1.jpg')} />
          </View>
          <View style={{ position: 'absolute', justifyContent: 'center', alignItems: 'center', marginLeft: 35, top: 130, width: 136, height: 136 }}>
            <Image
              source={this.state.profileImage_url ? { uri: this.state.profileImage_url } : require('../img/face1.jpg')}
              style={{ width: 120, height: 120, borderWidth: 3, borderRadius: 120, zIndex: 999, borderColor: '#FFFFFF' }} />
          </View>
          <Container style={styles.content}>
            <View
              style={{
                justifyContent: 'center',
                alignItems: 'center',
                borderBottomWidth: 1,
                borderColor: '#E4E4E4',
                top: 80
              }}
            />
          </Container>
        </Container>
        <Container contentContainerStyle={{ justifyContent: 'center', alignItems: 'center' }}>

          {this.state.appointment === true ?
            <Content >
              <Text style={{ fontFamily: 'Roboto_medium', fontWeight: '700', fontSize: 13, fontStyle: 'normal', marginLeft: wp('5%'), marginTop: hp('3%'), color: 'black' }}>
                Enter your name
                </Text>
              <TextInput
                value={this.state.name}
                onChangeText={(name) => {
                  this.setState({ name: name })
                }}
                keyboardType="ascii-capable"
                fontSize={35}
                placeholder='Your Name'
                style={{
                  marginTop: hp('1%'),
                  margin: hp('2%'),
                  color: '#5F6368',
                  borderColor: 'blue',
                  borderBottomWidth: 1,
                }} />
              <View style={{ justifyContent: 'center', alignItems: 'center' }}>
                {/* <Text style={{ justifyContent: 'center', alignItems: 'center', margin: wp('3%') }}>{this.state.message}</Text> */}
                <TouchableOpacity
                  onPress={() => this.confirm_Appointment()}
                  style={{
                    backgroundColor: '#2570EC',
                    width: wp('90%'),
                    height: hp('7.5%'),
                    borderRadius: 50,
                    justifyContent: 'center',
                    alignItems: 'center',
                    marginTop: hp('15%'),
                  }}>
                  <Text style={{ color: 'white', fontSize: wp('4%'), }}>Confirm</Text>
                </TouchableOpacity>
              </View>
            </Content>
            :
            <Content contentContainerStyle={{ justifyContent: 'center', alignItems: 'center', width: '100%', height: '100%', padding: wp('3%') }}>
              <Text style={{ color: 'red', fontSize: 20 }}>{this.state.message}</Text>
            </Content>}
        </Container>
        
      </Container>
    );
  }
}
export default confirm_Appointment;
